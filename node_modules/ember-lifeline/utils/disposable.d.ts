import { IMap, IDestroyable } from '../interfaces';
/**
 * Test use only. Allows for swapping out the WeakMap to a Map, giving
 * us the ability to detect whether disposables have all been called.
 *
 * @private
 * @param {*} mapForTesting A map used to ensure correctness when testing.
 */
export declare function _setRegisteredDisposables(mapForTesting: IMap<Object, any>): void;
/**
 * Registers a new disposable function to run for an instance. Will
 * handle lazily creating a new array to store the disposables per
 * instance if one does not exist. Will additionally patch an object's
 * `destroy` hook to ensure the destroyables are run/destroyed when
 * the object is destroyed.
 *
 * @public
 * @param {*} obj the instance to store the disposable for
 * @param {*} dispose a function that disposes of instance resources
 */
export declare function registerDisposable(obj: IDestroyable, dispose: Function): void | undefined;
/**
 * Runs all disposables for a given instance.
 *
 * @public
 * @param {*} obj the instance to run the disposables for
 */
export declare function runDisposables(obj: IDestroyable): void | undefined;
