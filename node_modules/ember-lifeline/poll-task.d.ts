import { IMap, TaskOrName, IDestroyable } from './interfaces';
declare type Token = string | number;
/**
 * Test use only. Allows for swapping out the WeakMap to a Map, giving
 * us the ability to detect whether the pollers set is empty.
 *
 * @private
 * @param {*} mapForTesting A map used to ensure correctness when testing.
 */
export declare function _setRegisteredPollers(mapForTesting: IMap<IDestroyable, Set<Token>>): void | undefined;
export declare function setShouldPoll(callback: Function): void;
export declare function pollTaskFor(token: Token): void | undefined;
/**
   Sets up a function that can perform polling logic in a testing safe way.
   The task is invoked synchronously with an argument (generally called `next`).
   In normal development/production when `next` is invoked, it will trigger the
   task again (recursively). However, when in test mode the recursive polling
   functionality is disabled, and usage of the `pollTaskFor` helper is required.

   Example:

   ```js
  import { pollTask, runTask, runDisposables } from 'ember-lifeline';

  export default Component.extend({
     api: injectService(),

     init() {
       this._super(...arguments);

       let token = pollTask(this, (next) => {
         this.get('api').request('get', 'some/path')
           .then(() => {
             runTask(this, next, 1800);
           })
       });

       this._pollToken = token;
     },

     willDestroy() {
       this._super(...arguments);

       runDisposables(this);
     }
   });
   ```

   Test Example:

   ```js
   import wait from 'ember-test-helpers/wait';
   import { pollTaskFor } from 'ember-lifeline';

   //...snip...

   test('foo-bar watches things', async function(assert) {
     await render(hbs`{{foo-bar}}`);

     return wait()
       .then(() => {
         assert.equal(serverRequests, 1, 'called initially');

         pollTaskFor(this._pollToken);
         return wait();
       })
       .then(() => {
         assert.equal(serverRequests, 2, 'called again');
       });
   });
   ```

   @method pollTask
   @param { IDestroyable } destroyable the entangled object that was provided with the original *Task call
   @param { Function | String } taskOrName a function representing the task, or string
                                           specifying a property representing the task,
                                           which is run at the provided time specified
                                           by timeout
   @param { Token } token the Token for the pollTask, either a String or Number
   @public
   */
export declare function pollTask(destroyable: IDestroyable, taskOrName: TaskOrName, token?: Token): Token;
/**
   Clears a previously setup polling task.

   Example:

   ```js
  import { pollTask, runTask, runDisposables } from 'ember-lifeline';

  export default Component.extend({
     api: injectService(),

     enableAutoRefresh() {
       this._pollToken = pollTask(this, (next) => {
         this.get('api').request('get', 'some/path')
           .then(() => {
             runTask(this, next, 1800);
           })
       });
     },

     disableAutoRefresh() {
        cancelPoll(this, this._pollToken);
     },

     willDestroy() {
       this._super(...arguments);

       runDisposables(this);
     }
   });
   ```

   @method cancelPoll
   @param { IDestroyable } destroyable the entangled object that was provided with the original *Task call
   @param { Token } _token the Token for the pollTask to be cleared, either a String or Number
   @public
   */
export declare function cancelPoll(_token: Token): any;
export declare function cancelPoll(destroyable: IDestroyable, _token: Token): any;
export {};
